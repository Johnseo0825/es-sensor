/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package ch.electrosense.avro.v1;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SenDataRec extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SenDataRec\",\"namespace\":\"ch.electrosense.avro.v1\",\"fields\":[{\"name\":\"CenterFreq\",\"type\":\"int\",\"doc\":\"Center frequency in Hz to which the RF front-end was tuned to while recording the associated spectrum data.\"},{\"name\":\"SquaredMag\",\"type\":{\"type\":\"array\",\"items\":\"float\"},\"doc\":\"Actual spectrum data recorded for the associated center frequency. The (1-FrequencyOverlap)*(FFTSize+1) data points represent the squared magnitudes of the frequency-domain signal on a dB scale.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Center frequency in Hz to which the RF front-end was tuned to while recording the associated spectrum data. */
  @Deprecated public int CenterFreq;
  /** Actual spectrum data recorded for the associated center frequency. The (1-FrequencyOverlap)*(FFTSize+1) data points represent the squared magnitudes of the frequency-domain signal on a dB scale. */
  @Deprecated public java.util.List<java.lang.Float> SquaredMag;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public SenDataRec() {}

  /**
   * All-args constructor.
   */
  public SenDataRec(java.lang.Integer CenterFreq, java.util.List<java.lang.Float> SquaredMag) {
    this.CenterFreq = CenterFreq;
    this.SquaredMag = SquaredMag;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return CenterFreq;
    case 1: return SquaredMag;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: CenterFreq = (java.lang.Integer)value$; break;
    case 1: SquaredMag = (java.util.List<java.lang.Float>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'CenterFreq' field.
   * Center frequency in Hz to which the RF front-end was tuned to while recording the associated spectrum data.   */
  public java.lang.Integer getCenterFreq() {
    return CenterFreq;
  }

  /**
   * Sets the value of the 'CenterFreq' field.
   * Center frequency in Hz to which the RF front-end was tuned to while recording the associated spectrum data.   * @param value the value to set.
   */
  public void setCenterFreq(java.lang.Integer value) {
    this.CenterFreq = value;
  }

  /**
   * Gets the value of the 'SquaredMag' field.
   * Actual spectrum data recorded for the associated center frequency. The (1-FrequencyOverlap)*(FFTSize+1) data points represent the squared magnitudes of the frequency-domain signal on a dB scale.   */
  public java.util.List<java.lang.Float> getSquaredMag() {
    return SquaredMag;
  }

  /**
   * Sets the value of the 'SquaredMag' field.
   * Actual spectrum data recorded for the associated center frequency. The (1-FrequencyOverlap)*(FFTSize+1) data points represent the squared magnitudes of the frequency-domain signal on a dB scale.   * @param value the value to set.
   */
  public void setSquaredMag(java.util.List<java.lang.Float> value) {
    this.SquaredMag = value;
  }

  /** Creates a new SenDataRec RecordBuilder */
  public static ch.electrosense.avro.v1.SenDataRec.Builder newBuilder() {
    return new ch.electrosense.avro.v1.SenDataRec.Builder();
  }
  
  /** Creates a new SenDataRec RecordBuilder by copying an existing Builder */
  public static ch.electrosense.avro.v1.SenDataRec.Builder newBuilder(ch.electrosense.avro.v1.SenDataRec.Builder other) {
    return new ch.electrosense.avro.v1.SenDataRec.Builder(other);
  }
  
  /** Creates a new SenDataRec RecordBuilder by copying an existing SenDataRec instance */
  public static ch.electrosense.avro.v1.SenDataRec.Builder newBuilder(ch.electrosense.avro.v1.SenDataRec other) {
    return new ch.electrosense.avro.v1.SenDataRec.Builder(other);
  }
  
  /**
   * RecordBuilder for SenDataRec instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SenDataRec>
    implements org.apache.avro.data.RecordBuilder<SenDataRec> {

    private int CenterFreq;
    private java.util.List<java.lang.Float> SquaredMag;

    /** Creates a new Builder */
    private Builder() {
      super(ch.electrosense.avro.v1.SenDataRec.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(ch.electrosense.avro.v1.SenDataRec.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.CenterFreq)) {
        this.CenterFreq = data().deepCopy(fields()[0].schema(), other.CenterFreq);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.SquaredMag)) {
        this.SquaredMag = data().deepCopy(fields()[1].schema(), other.SquaredMag);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing SenDataRec instance */
    private Builder(ch.electrosense.avro.v1.SenDataRec other) {
            super(ch.electrosense.avro.v1.SenDataRec.SCHEMA$);
      if (isValidValue(fields()[0], other.CenterFreq)) {
        this.CenterFreq = data().deepCopy(fields()[0].schema(), other.CenterFreq);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.SquaredMag)) {
        this.SquaredMag = data().deepCopy(fields()[1].schema(), other.SquaredMag);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'CenterFreq' field */
    public java.lang.Integer getCenterFreq() {
      return CenterFreq;
    }
    
    /** Sets the value of the 'CenterFreq' field */
    public ch.electrosense.avro.v1.SenDataRec.Builder setCenterFreq(int value) {
      validate(fields()[0], value);
      this.CenterFreq = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'CenterFreq' field has been set */
    public boolean hasCenterFreq() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'CenterFreq' field */
    public ch.electrosense.avro.v1.SenDataRec.Builder clearCenterFreq() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'SquaredMag' field */
    public java.util.List<java.lang.Float> getSquaredMag() {
      return SquaredMag;
    }
    
    /** Sets the value of the 'SquaredMag' field */
    public ch.electrosense.avro.v1.SenDataRec.Builder setSquaredMag(java.util.List<java.lang.Float> value) {
      validate(fields()[1], value);
      this.SquaredMag = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'SquaredMag' field has been set */
    public boolean hasSquaredMag() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'SquaredMag' field */
    public ch.electrosense.avro.v1.SenDataRec.Builder clearSquaredMag() {
      SquaredMag = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public SenDataRec build() {
      try {
        SenDataRec record = new SenDataRec();
        record.CenterFreq = fieldSetFlags()[0] ? this.CenterFreq : (java.lang.Integer) defaultValue(fields()[0]);
        record.SquaredMag = fieldSetFlags()[1] ? this.SquaredMag : (java.util.List<java.lang.Float>) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
