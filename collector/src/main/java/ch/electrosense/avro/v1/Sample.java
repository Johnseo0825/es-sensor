/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package ch.electrosense.avro.v1;  
@SuppressWarnings("all")
/** Spectrum Monitoring Sample (Required) */
@org.apache.avro.specific.AvroGenerated
public class Sample extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Sample\",\"namespace\":\"ch.electrosense.avro.v1\",\"doc\":\"Spectrum Monitoring Sample (Required)\",\"fields\":[{\"name\":\"SenId\",\"type\":\"long\",\"doc\":\"Required Field - Unique sensor identifier.\"},{\"name\":\"SenConf\",\"type\":{\"type\":\"record\",\"name\":\"SenConfRec\",\"fields\":[{\"name\":\"HoppingStrategy\",\"type\":\"int\",\"doc\":\"Identifier of the hopping strategy used to overcome the bandwidth limitations of the RF front-end. [0:Sequential, 1:Random, 2:Similarity]\"},{\"name\":\"WindowingFunction\",\"type\":\"int\",\"doc\":\"Identifier of the windowing function used to reshape the time-domain samples. [0:Rectangular, 1:Hanning, 2:BlackmanHarris]\"},{\"name\":\"FFTSize\",\"type\":\"int\",\"doc\":\"Size of the fast Fourier transform (FFT), i.e. the number of samples in the frequency-domain representation of a signal. [2^i, where i in {8,...,17}]\"},{\"name\":\"AveragingFactor\",\"type\":\"int\",\"doc\":\"Number of frequency-domain signals to average. [>0]\"},{\"name\":\"FrequencyOverlap\",\"type\":\"float\",\"doc\":\"Fraction of the frequency-domain signals to drop due to non-linear frequency responses of the RF front-end. The effective number of samples in frequency-domain signals is reduced from FFTSize to (1-FrequencyOverlap)*(FFTSize+1). The bandwidth of the frequency-domain signals is reduced from FFTSize*FrequencyResolution to (1-FrequencyOverlap)*FFTSize*FrequencyResolution. [0,...,1]\"},{\"name\":\"FrequencyResolution\",\"type\":\"float\",\"doc\":\"Frequency difference in Hz between successive samples within the frequency-domain signals. [>0]\"},{\"name\":\"Gain\",\"type\":\"float\",\"doc\":\"RF front-end gain in dB. [-1 for automatic gain control]\"}]},\"doc\":\"Required Field - Sensor configuration for the recorded data set.\"},{\"name\":\"SenPos\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"SenPosRec\",\"fields\":[{\"name\":\"PosSys\",\"type\":\"string\",\"doc\":\"Description/identification of the used positioning system.\"},{\"name\":\"PosVal\",\"type\":{\"type\":\"array\",\"items\":\"float\"},\"doc\":\"Position values in the corresponding positioning system.\"}]}],\"doc\":\"Sensor Position (Optional)\"},{\"name\":\"SenTemp\",\"type\":[\"null\",\"float\"],\"doc\":\"Optional Filed - Ambient temperature of the sensor in degrees Celsius.\"},{\"name\":\"SenTime\",\"type\":{\"type\":\"record\",\"name\":\"SenTimeRec\",\"fields\":[{\"name\":\"TimeSecs\",\"type\":\"long\",\"doc\":\"Number of seconds since the UNIX epoch start on January 1st, 1970 at UTC.\"},{\"name\":\"TimeMicrosecs\",\"type\":\"int\",\"doc\":\"Microseconds since UNIX Epoch (Required)\"}]},\"doc\":\"Time Stamp (Required)\"},{\"name\":\"SenData\",\"type\":{\"type\":\"record\",\"name\":\"SenDataRec\",\"fields\":[{\"name\":\"CenterFreq\",\"type\":\"int\",\"doc\":\"Center frequency in Hz to which the RF front-end was tuned to while recording the associated spectrum data.\"},{\"name\":\"SquaredMag\",\"type\":{\"type\":\"array\",\"items\":\"float\"},\"doc\":\"Actual spectrum data recorded for the associated center frequency. The (1-FrequencyOverlap)*(FFTSize+1) data points represent the squared magnitudes of the frequency-domain signal on a dB scale.\"}]},\"doc\":\"Required Field - Spectrum data recorded for a certain center frequency.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Required Field - Unique sensor identifier. */
  @Deprecated public long SenId;
  /** Required Field - Sensor configuration for the recorded data set. */
  @Deprecated public ch.electrosense.avro.v1.SenConfRec SenConf;
  /** Sensor Position (Optional) */
  @Deprecated public ch.electrosense.avro.v1.SenPosRec SenPos;
  /** Optional Filed - Ambient temperature of the sensor in degrees Celsius. */
  @Deprecated public java.lang.Float SenTemp;
  /** Time Stamp (Required) */
  @Deprecated public ch.electrosense.avro.v1.SenTimeRec SenTime;
  /** Required Field - Spectrum data recorded for a certain center frequency. */
  @Deprecated public ch.electrosense.avro.v1.SenDataRec SenData;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Sample() {}

  /**
   * All-args constructor.
   */
  public Sample(java.lang.Long SenId, ch.electrosense.avro.v1.SenConfRec SenConf, ch.electrosense.avro.v1.SenPosRec SenPos, java.lang.Float SenTemp, ch.electrosense.avro.v1.SenTimeRec SenTime, ch.electrosense.avro.v1.SenDataRec SenData) {
    this.SenId = SenId;
    this.SenConf = SenConf;
    this.SenPos = SenPos;
    this.SenTemp = SenTemp;
    this.SenTime = SenTime;
    this.SenData = SenData;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return SenId;
    case 1: return SenConf;
    case 2: return SenPos;
    case 3: return SenTemp;
    case 4: return SenTime;
    case 5: return SenData;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: SenId = (java.lang.Long)value$; break;
    case 1: SenConf = (ch.electrosense.avro.v1.SenConfRec)value$; break;
    case 2: SenPos = (ch.electrosense.avro.v1.SenPosRec)value$; break;
    case 3: SenTemp = (java.lang.Float)value$; break;
    case 4: SenTime = (ch.electrosense.avro.v1.SenTimeRec)value$; break;
    case 5: SenData = (ch.electrosense.avro.v1.SenDataRec)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'SenId' field.
   * Required Field - Unique sensor identifier.   */
  public java.lang.Long getSenId() {
    return SenId;
  }

  /**
   * Sets the value of the 'SenId' field.
   * Required Field - Unique sensor identifier.   * @param value the value to set.
   */
  public void setSenId(java.lang.Long value) {
    this.SenId = value;
  }

  /**
   * Gets the value of the 'SenConf' field.
   * Required Field - Sensor configuration for the recorded data set.   */
  public ch.electrosense.avro.v1.SenConfRec getSenConf() {
    return SenConf;
  }

  /**
   * Sets the value of the 'SenConf' field.
   * Required Field - Sensor configuration for the recorded data set.   * @param value the value to set.
   */
  public void setSenConf(ch.electrosense.avro.v1.SenConfRec value) {
    this.SenConf = value;
  }

  /**
   * Gets the value of the 'SenPos' field.
   * Sensor Position (Optional)   */
  public ch.electrosense.avro.v1.SenPosRec getSenPos() {
    return SenPos;
  }

  /**
   * Sets the value of the 'SenPos' field.
   * Sensor Position (Optional)   * @param value the value to set.
   */
  public void setSenPos(ch.electrosense.avro.v1.SenPosRec value) {
    this.SenPos = value;
  }

  /**
   * Gets the value of the 'SenTemp' field.
   * Optional Filed - Ambient temperature of the sensor in degrees Celsius.   */
  public java.lang.Float getSenTemp() {
    return SenTemp;
  }

  /**
   * Sets the value of the 'SenTemp' field.
   * Optional Filed - Ambient temperature of the sensor in degrees Celsius.   * @param value the value to set.
   */
  public void setSenTemp(java.lang.Float value) {
    this.SenTemp = value;
  }

  /**
   * Gets the value of the 'SenTime' field.
   * Time Stamp (Required)   */
  public ch.electrosense.avro.v1.SenTimeRec getSenTime() {
    return SenTime;
  }

  /**
   * Sets the value of the 'SenTime' field.
   * Time Stamp (Required)   * @param value the value to set.
   */
  public void setSenTime(ch.electrosense.avro.v1.SenTimeRec value) {
    this.SenTime = value;
  }

  /**
   * Gets the value of the 'SenData' field.
   * Required Field - Spectrum data recorded for a certain center frequency.   */
  public ch.electrosense.avro.v1.SenDataRec getSenData() {
    return SenData;
  }

  /**
   * Sets the value of the 'SenData' field.
   * Required Field - Spectrum data recorded for a certain center frequency.   * @param value the value to set.
   */
  public void setSenData(ch.electrosense.avro.v1.SenDataRec value) {
    this.SenData = value;
  }

  /** Creates a new Sample RecordBuilder */
  public static ch.electrosense.avro.v1.Sample.Builder newBuilder() {
    return new ch.electrosense.avro.v1.Sample.Builder();
  }
  
  /** Creates a new Sample RecordBuilder by copying an existing Builder */
  public static ch.electrosense.avro.v1.Sample.Builder newBuilder(ch.electrosense.avro.v1.Sample.Builder other) {
    return new ch.electrosense.avro.v1.Sample.Builder(other);
  }
  
  /** Creates a new Sample RecordBuilder by copying an existing Sample instance */
  public static ch.electrosense.avro.v1.Sample.Builder newBuilder(ch.electrosense.avro.v1.Sample other) {
    return new ch.electrosense.avro.v1.Sample.Builder(other);
  }
  
  /**
   * RecordBuilder for Sample instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Sample>
    implements org.apache.avro.data.RecordBuilder<Sample> {

    private long SenId;
    private ch.electrosense.avro.v1.SenConfRec SenConf;
    private ch.electrosense.avro.v1.SenPosRec SenPos;
    private java.lang.Float SenTemp;
    private ch.electrosense.avro.v1.SenTimeRec SenTime;
    private ch.electrosense.avro.v1.SenDataRec SenData;

    /** Creates a new Builder */
    private Builder() {
      super(ch.electrosense.avro.v1.Sample.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(ch.electrosense.avro.v1.Sample.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.SenId)) {
        this.SenId = data().deepCopy(fields()[0].schema(), other.SenId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.SenConf)) {
        this.SenConf = data().deepCopy(fields()[1].schema(), other.SenConf);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.SenPos)) {
        this.SenPos = data().deepCopy(fields()[2].schema(), other.SenPos);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.SenTemp)) {
        this.SenTemp = data().deepCopy(fields()[3].schema(), other.SenTemp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.SenTime)) {
        this.SenTime = data().deepCopy(fields()[4].schema(), other.SenTime);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.SenData)) {
        this.SenData = data().deepCopy(fields()[5].schema(), other.SenData);
        fieldSetFlags()[5] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Sample instance */
    private Builder(ch.electrosense.avro.v1.Sample other) {
            super(ch.electrosense.avro.v1.Sample.SCHEMA$);
      if (isValidValue(fields()[0], other.SenId)) {
        this.SenId = data().deepCopy(fields()[0].schema(), other.SenId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.SenConf)) {
        this.SenConf = data().deepCopy(fields()[1].schema(), other.SenConf);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.SenPos)) {
        this.SenPos = data().deepCopy(fields()[2].schema(), other.SenPos);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.SenTemp)) {
        this.SenTemp = data().deepCopy(fields()[3].schema(), other.SenTemp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.SenTime)) {
        this.SenTime = data().deepCopy(fields()[4].schema(), other.SenTime);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.SenData)) {
        this.SenData = data().deepCopy(fields()[5].schema(), other.SenData);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'SenId' field */
    public java.lang.Long getSenId() {
      return SenId;
    }
    
    /** Sets the value of the 'SenId' field */
    public ch.electrosense.avro.v1.Sample.Builder setSenId(long value) {
      validate(fields()[0], value);
      this.SenId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'SenId' field has been set */
    public boolean hasSenId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'SenId' field */
    public ch.electrosense.avro.v1.Sample.Builder clearSenId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'SenConf' field */
    public ch.electrosense.avro.v1.SenConfRec getSenConf() {
      return SenConf;
    }
    
    /** Sets the value of the 'SenConf' field */
    public ch.electrosense.avro.v1.Sample.Builder setSenConf(ch.electrosense.avro.v1.SenConfRec value) {
      validate(fields()[1], value);
      this.SenConf = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'SenConf' field has been set */
    public boolean hasSenConf() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'SenConf' field */
    public ch.electrosense.avro.v1.Sample.Builder clearSenConf() {
      SenConf = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'SenPos' field */
    public ch.electrosense.avro.v1.SenPosRec getSenPos() {
      return SenPos;
    }
    
    /** Sets the value of the 'SenPos' field */
    public ch.electrosense.avro.v1.Sample.Builder setSenPos(ch.electrosense.avro.v1.SenPosRec value) {
      validate(fields()[2], value);
      this.SenPos = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'SenPos' field has been set */
    public boolean hasSenPos() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'SenPos' field */
    public ch.electrosense.avro.v1.Sample.Builder clearSenPos() {
      SenPos = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'SenTemp' field */
    public java.lang.Float getSenTemp() {
      return SenTemp;
    }
    
    /** Sets the value of the 'SenTemp' field */
    public ch.electrosense.avro.v1.Sample.Builder setSenTemp(java.lang.Float value) {
      validate(fields()[3], value);
      this.SenTemp = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'SenTemp' field has been set */
    public boolean hasSenTemp() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'SenTemp' field */
    public ch.electrosense.avro.v1.Sample.Builder clearSenTemp() {
      SenTemp = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'SenTime' field */
    public ch.electrosense.avro.v1.SenTimeRec getSenTime() {
      return SenTime;
    }
    
    /** Sets the value of the 'SenTime' field */
    public ch.electrosense.avro.v1.Sample.Builder setSenTime(ch.electrosense.avro.v1.SenTimeRec value) {
      validate(fields()[4], value);
      this.SenTime = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'SenTime' field has been set */
    public boolean hasSenTime() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'SenTime' field */
    public ch.electrosense.avro.v1.Sample.Builder clearSenTime() {
      SenTime = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'SenData' field */
    public ch.electrosense.avro.v1.SenDataRec getSenData() {
      return SenData;
    }
    
    /** Sets the value of the 'SenData' field */
    public ch.electrosense.avro.v1.Sample.Builder setSenData(ch.electrosense.avro.v1.SenDataRec value) {
      validate(fields()[5], value);
      this.SenData = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'SenData' field has been set */
    public boolean hasSenData() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'SenData' field */
    public ch.electrosense.avro.v1.Sample.Builder clearSenData() {
      SenData = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public Sample build() {
      try {
        Sample record = new Sample();
        record.SenId = fieldSetFlags()[0] ? this.SenId : (java.lang.Long) defaultValue(fields()[0]);
        record.SenConf = fieldSetFlags()[1] ? this.SenConf : (ch.electrosense.avro.v1.SenConfRec) defaultValue(fields()[1]);
        record.SenPos = fieldSetFlags()[2] ? this.SenPos : (ch.electrosense.avro.v1.SenPosRec) defaultValue(fields()[2]);
        record.SenTemp = fieldSetFlags()[3] ? this.SenTemp : (java.lang.Float) defaultValue(fields()[3]);
        record.SenTime = fieldSetFlags()[4] ? this.SenTime : (ch.electrosense.avro.v1.SenTimeRec) defaultValue(fields()[4]);
        record.SenData = fieldSetFlags()[5] ? this.SenData : (ch.electrosense.avro.v1.SenDataRec) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
