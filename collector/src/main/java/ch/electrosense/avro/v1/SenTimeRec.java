/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package ch.electrosense.avro.v1;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SenTimeRec extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SenTimeRec\",\"namespace\":\"ch.electrosense.avro.v1\",\"fields\":[{\"name\":\"TimeSecs\",\"type\":\"long\",\"doc\":\"Number of seconds since the UNIX epoch start on January 1st, 1970 at UTC.\"},{\"name\":\"TimeMicrosecs\",\"type\":\"int\",\"doc\":\"Microseconds since UNIX Epoch (Required)\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Number of seconds since the UNIX epoch start on January 1st, 1970 at UTC. */
  @Deprecated public long TimeSecs;
  /** Microseconds since UNIX Epoch (Required) */
  @Deprecated public int TimeMicrosecs;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public SenTimeRec() {}

  /**
   * All-args constructor.
   */
  public SenTimeRec(java.lang.Long TimeSecs, java.lang.Integer TimeMicrosecs) {
    this.TimeSecs = TimeSecs;
    this.TimeMicrosecs = TimeMicrosecs;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return TimeSecs;
    case 1: return TimeMicrosecs;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: TimeSecs = (java.lang.Long)value$; break;
    case 1: TimeMicrosecs = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'TimeSecs' field.
   * Number of seconds since the UNIX epoch start on January 1st, 1970 at UTC.   */
  public java.lang.Long getTimeSecs() {
    return TimeSecs;
  }

  /**
   * Sets the value of the 'TimeSecs' field.
   * Number of seconds since the UNIX epoch start on January 1st, 1970 at UTC.   * @param value the value to set.
   */
  public void setTimeSecs(java.lang.Long value) {
    this.TimeSecs = value;
  }

  /**
   * Gets the value of the 'TimeMicrosecs' field.
   * Microseconds since UNIX Epoch (Required)   */
  public java.lang.Integer getTimeMicrosecs() {
    return TimeMicrosecs;
  }

  /**
   * Sets the value of the 'TimeMicrosecs' field.
   * Microseconds since UNIX Epoch (Required)   * @param value the value to set.
   */
  public void setTimeMicrosecs(java.lang.Integer value) {
    this.TimeMicrosecs = value;
  }

  /** Creates a new SenTimeRec RecordBuilder */
  public static ch.electrosense.avro.v1.SenTimeRec.Builder newBuilder() {
    return new ch.electrosense.avro.v1.SenTimeRec.Builder();
  }
  
  /** Creates a new SenTimeRec RecordBuilder by copying an existing Builder */
  public static ch.electrosense.avro.v1.SenTimeRec.Builder newBuilder(ch.electrosense.avro.v1.SenTimeRec.Builder other) {
    return new ch.electrosense.avro.v1.SenTimeRec.Builder(other);
  }
  
  /** Creates a new SenTimeRec RecordBuilder by copying an existing SenTimeRec instance */
  public static ch.electrosense.avro.v1.SenTimeRec.Builder newBuilder(ch.electrosense.avro.v1.SenTimeRec other) {
    return new ch.electrosense.avro.v1.SenTimeRec.Builder(other);
  }
  
  /**
   * RecordBuilder for SenTimeRec instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SenTimeRec>
    implements org.apache.avro.data.RecordBuilder<SenTimeRec> {

    private long TimeSecs;
    private int TimeMicrosecs;

    /** Creates a new Builder */
    private Builder() {
      super(ch.electrosense.avro.v1.SenTimeRec.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(ch.electrosense.avro.v1.SenTimeRec.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.TimeSecs)) {
        this.TimeSecs = data().deepCopy(fields()[0].schema(), other.TimeSecs);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.TimeMicrosecs)) {
        this.TimeMicrosecs = data().deepCopy(fields()[1].schema(), other.TimeMicrosecs);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing SenTimeRec instance */
    private Builder(ch.electrosense.avro.v1.SenTimeRec other) {
            super(ch.electrosense.avro.v1.SenTimeRec.SCHEMA$);
      if (isValidValue(fields()[0], other.TimeSecs)) {
        this.TimeSecs = data().deepCopy(fields()[0].schema(), other.TimeSecs);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.TimeMicrosecs)) {
        this.TimeMicrosecs = data().deepCopy(fields()[1].schema(), other.TimeMicrosecs);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'TimeSecs' field */
    public java.lang.Long getTimeSecs() {
      return TimeSecs;
    }
    
    /** Sets the value of the 'TimeSecs' field */
    public ch.electrosense.avro.v1.SenTimeRec.Builder setTimeSecs(long value) {
      validate(fields()[0], value);
      this.TimeSecs = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'TimeSecs' field has been set */
    public boolean hasTimeSecs() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'TimeSecs' field */
    public ch.electrosense.avro.v1.SenTimeRec.Builder clearTimeSecs() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'TimeMicrosecs' field */
    public java.lang.Integer getTimeMicrosecs() {
      return TimeMicrosecs;
    }
    
    /** Sets the value of the 'TimeMicrosecs' field */
    public ch.electrosense.avro.v1.SenTimeRec.Builder setTimeMicrosecs(int value) {
      validate(fields()[1], value);
      this.TimeMicrosecs = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'TimeMicrosecs' field has been set */
    public boolean hasTimeMicrosecs() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'TimeMicrosecs' field */
    public ch.electrosense.avro.v1.SenTimeRec.Builder clearTimeMicrosecs() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public SenTimeRec build() {
      try {
        SenTimeRec record = new SenTimeRec();
        record.TimeSecs = fieldSetFlags()[0] ? this.TimeSecs : (java.lang.Long) defaultValue(fields()[0]);
        record.TimeMicrosecs = fieldSetFlags()[1] ? this.TimeMicrosecs : (java.lang.Integer) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
